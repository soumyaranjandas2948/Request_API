# # Import Libraries

import numpy as np
import pandas as pd
import seaborn as sns


# # Load Dataset

iris_df = sns.load_dataset('iris')


# # Dataset Visual

iris_df.head()

iris_df.species.unique()


# # Checking Null Values

iris_df.isnull().sum()


# There are no null values in this Dataset

df = iris_df[iris_df['species'] != 'setosa']


# Here basically i am doing binary classification, that is why i remove 'setosa' class. Based on two class 'versicolor' and 'virginica' i am gonna do binary classification.

df.head()


# # Map target column to binary format

df['species'] = df['species'].map({'versicolor' : 0,'virginica' : 1})

df.head()


# # Exploratory Data Analysis

sns.pairplot(df,hue = 'species')


# For checking correlation

corr = df.corr()

sns.heatmap(corr)


# # Split Dataset into independent and dependent features

dep_ftr = df['species']
ind_ftr = df.drop('species',axis = 1)

ind_ftr.head()


dep_ftr


# # Train Test Split

# For Train-Test-Split i am gonna use sklearn library of model_selection.

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(ind_ftr,dep_ftr,test_size = 25,random_state = 42)


# # Train and Test the Model

from sklearn.linear_model import LogisticRegression

classifier = LogisticRegression()


# Importing Grid-Search-CV

from sklearn.model_selection import GridSearchCV
parameter = {'penalty':['l1','l2','elasticnet'],'C':[1,2,3,4,5,6,10,20,30,40,50,60],'max_iter':[100,200,300]}

classifier_regressor = GridSearchCV(classifier,parameter,scoring = 'accuracy',cv = 5) #estimater = classifier,param_grid = parameter


classifier_regressor.fit(x_train,y_train)


# To see best parameters selected by model Training

print(classifier_regressor.best_params_)
# To see best traing score using those parameters

print(classifier_regressor.best_score_)


# # Prediction

y_pred = classifier_regressor.predict(x_test)


y_pred


# # Checking Accuracy Score

from sklearn.metrics import accuracy_score,classification_report
score = accuracy_score(y_pred,y_test)
score



print(classification_report(y_pred,y_test))


# our Accuracy score is 92% and precision,recall and f1-score of both the classes are good.so our model is doing good.

# # Save the Model
get_ipython().system('pip install pickle5')

import pickle

filename = open("C:\\Users\\SOUMYA RANJAN DAS\\Downloads\\Documents\\tel_churn\\lr_model.sav","wb")

pickle.dump(classifier_regressor,filename)
filename.close()
x_test.head()
x_test.to_csv('C:\\Users\\SOUMYA RANJAN DAS\\Downloads\\Documents\\tel_churn\\model_lr_test.csv')





